[
  {
    "objectID": "slides/week1.html#r-in-the-terminal",
    "href": "slides/week1.html#r-in-the-terminal",
    "title": "Welcome!",
    "section": "R in the terminal",
    "text": "R in the terminal"
  },
  {
    "objectID": "slides/week1.html#r-rstudio",
    "href": "slides/week1.html#r-rstudio",
    "title": "Welcome!",
    "section": "R + RStudio",
    "text": "R + RStudio"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Intro to PHDS",
    "section": "",
    "text": "Term: Fall 2024\nTime: Friday 9am - 12:55pm\nLocation: SSB 114\nGitHub"
  },
  {
    "objectID": "index.html#pm-566-introduction-to-health-data-science",
    "href": "index.html#pm-566-introduction-to-health-data-science",
    "title": "Intro to PHDS",
    "section": "",
    "text": "Term: Fall 2024\nTime: Friday 9am - 12:55pm\nLocation: SSB 114\nGitHub"
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Term: Fall 2024\nTime: Friday 9am - 12:55pm\nLocation: SSB 114\nUnits: 4"
  },
  {
    "objectID": "syllabus.html#pm-566-introduction-to-health-data-science",
    "href": "syllabus.html#pm-566-introduction-to-health-data-science",
    "title": "Syllabus",
    "section": "",
    "text": "Term: Fall 2024\nTime: Friday 9am - 12:55pm\nLocation: SSB 114\nUnits: 4"
  },
  {
    "objectID": "syllabus.html#course-overview",
    "href": "syllabus.html#course-overview",
    "title": "Syllabus",
    "section": "Course Overview",
    "text": "Course Overview\nThis course serves as an introduction to data science with a focus on the acquisition and analysis of real-life data. Students will learn the tools needed to: 1. Create usable and reproducible datasets by accessing, scraping, and cleaning data 2. Conduct exploratory data analysis and visualization 3. Identify scientific questions that can be answered with a given dataset 4. Write functional code in the R programming language, build basic apps, and construct a website"
  },
  {
    "objectID": "syllabus.html#learning-objectives",
    "href": "syllabus.html#learning-objectives",
    "title": "Syllabus",
    "section": "Learning Objectives",
    "text": "Learning Objectives\nThrough this course, students will become familiar with the techniques used in data science and apply them to health-related datasets. Students will learn:\n\nProgramming in R and associated tools including Quarto, Git, and SQL\nData visualization – selecting appropriate plots to gain insight from data\nData collection – web scraping, data wrangling, and database management\nExploratory data analysis – generating hypotheses while building intuition and understanding of a dataset\nBasic computational algorithms, including simulation strategies\nBuilding interactive tools and websites\n\nPrerequisite(s): None\nRecommended Preparation: Familiarity with programming, particularly in the R language"
  },
  {
    "objectID": "syllabus.html#course-notes",
    "href": "syllabus.html#course-notes",
    "title": "Syllabus",
    "section": "Course Notes",
    "text": "Course Notes\nLecture notes presented in class will be posted on GitHub."
  },
  {
    "objectID": "syllabus.html#technological-proficiency-and-hardwaresoftware-required",
    "href": "syllabus.html#technological-proficiency-and-hardwaresoftware-required",
    "title": "Syllabus",
    "section": "Technological Proficiency and Hardware/Software Required",
    "text": "Technological Proficiency and Hardware/Software Required\nThe R language (http://cran.r-project.org) will be used throughout the semester and we recommend using the R Studio IDE for coding (https://posit.co/download/rstudio-desktop/). Additionally, if they do not already have one, students will be required to create a GitHub account (https://github.com/)."
  },
  {
    "objectID": "syllabus.html#readings-and-supplementary-materials",
    "href": "syllabus.html#readings-and-supplementary-materials",
    "title": "Syllabus",
    "section": "Readings and Supplementary Materials",
    "text": "Readings and Supplementary Materials\nThere are no required readings for this course."
  },
  {
    "objectID": "syllabus.html#supplementary-references",
    "href": "syllabus.html#supplementary-references",
    "title": "Syllabus",
    "section": "Supplementary References",
    "text": "Supplementary References\n\n\nR Programming for Data Science, 2019. Roger Peng. https://bookdown.org/rdpeng/rprogdatascience/\n\nR for Data Science, 2017. Garrett Grolemund and Hadley Wickham. http://r4ds.had.co.nz/\nExploratory Data Analysis with R, 2020. Roger Peng. https://bookdown.org/rdpeng/exdata/\nMastering Software Development in R, 2017. Roger Peng, Sean Kross, Brooke Anderson. https://bookdown.org/rdpeng/RProgDA/\nR Packages, 2023. Hadley Wickham and Jennifer Bryan. https://r-pkgs.org/\nModern Data Science with R, 2023. Benjamin S. Baumer, Daniel T. Kaplan, and Nicholas J. Horton. https://mdsr-book.github.io/mdsr3e/"
  },
  {
    "objectID": "syllabus.html#description-and-assessment-of-assignments",
    "href": "syllabus.html#description-and-assessment-of-assignments",
    "title": "Syllabus",
    "section": "Description and Assessment of Assignments",
    "text": "Description and Assessment of Assignments\nAssignments: There will be 5 assignments given throughout the semester, approximately 1 every 2 weeks. Students may discuss the problems with one another, however, individual solutions must be submitted and copying will not be tolerated. All assignments must be completed in Quarto or R Markdown, and submitted through the Github classes portal of the course. Late assignments will be penalized by 20% for each day past the due date.\nFinal Project: The final project will be to write a report for an analysis applied to a real-world dataset and to create a website that includes interactive visualizations to display the data and results. The source code, website files, and PDF report will be uploaded to GitHub.\nLabs: There will be weekly lab assignments which are graded for completion. Each week, there will be class time devoted to working on that week’s lab. Completing the weekly labs will count as part of the overall grade."
  },
  {
    "objectID": "syllabus.html#grading-breakdown",
    "href": "syllabus.html#grading-breakdown",
    "title": "Syllabus",
    "section": "Grading Breakdown",
    "text": "Grading Breakdown\n\n\n\nAssignment\n% of Grade\n\n\n\n\nLabs\n20%\n\n\nHomework (5)\n30%\n\n\nMidterm Exam\n20%\n\n\nFinal Project\n30%\n\n\nTOTAL\n100%"
  },
  {
    "objectID": "syllabus.html#assignment-submission-policy",
    "href": "syllabus.html#assignment-submission-policy",
    "title": "Syllabus",
    "section": "Assignment Submission Policy",
    "text": "Assignment Submission Policy\n/////////////////////////////////////////// Assignments shall be submitted on the Github classroom portal of the course. Late homework assignments will not be accepted without penalty, except when verifiable extenuating circumstances can be demonstrated."
  },
  {
    "objectID": "syllabus.html#schedule",
    "href": "syllabus.html#schedule",
    "title": "Syllabus",
    "section": "Schedule",
    "text": "Schedule\nAs the weeks go by, consult the Schedule Page for more information on weekly topics, problem sets, readings, and other materials. The schedule is likely to change as we go. Links to readings, assignments, and other materials from class will be posted on that page."
  },
  {
    "objectID": "syllabus.html#academic-integrity",
    "href": "syllabus.html#academic-integrity",
    "title": "Syllabus",
    "section": "Academic Integrity",
    "text": "Academic Integrity\nThe University of Southern California is foremost a learning community committed to fostering successful scholars and researchers dedicated to the pursuit of knowledge and the transmission of ideas. Academic misconduct is in contrast to the university’s mission to educate students through a broad array of first-rank academic, professional, and extracurricular programs and includes any act of dishonesty in the submission of academic work (either in draft or final form).\nThis course will follow the expectations for academic integrity as stated in the USC Student Handbook. All students are expected to submit assignments that are original work and prepared specifically for the course/section in this academic term. You may not submit work written by others or “recycle” work prepared for other courses without obtaining written permission from the instructor(s). Students suspected of engaging in academic misconduct will be reported to the Office of Academic Integrity.\nOther violations of academic misconduct include, but are not limited to, cheating, plagiarism, fabrication (e.g., falsifying data), knowingly assisting others in acts of academic dishonesty, and any act that gains or is intended to gain an unfair academic advantage.\nThe impact of academic dishonesty is far-reaching and is considered a serious offense against the university and could result in outcomes such as failure on the assignment, failure in the course, suspension, or even expulsion from the university.\nFor more information about academic integrity see the student handbook or the Office of Academic Integrity’s website, and university policies on Research and Scholarship Misconduct.\n\nStatement on the use of Artificial Intelligence\nGenerative artificial intelligence (AI) may be used under the direction and rules specified by the course instructor in specific circumstances as outlined in the syllabus. The student is responsible for the quality and content of all written assignments. Unless otherwise indicated by the course instructor, generative AI may be used to create an initial literature review, document outline and/or to organize material toward a first draft of a class paper, proofreading, or grammatical accuracy; however the final content of the written document and critical thinking of the ideas presented in the document must represent the student’s individual work and ideas learned through course content and/or research conducted from sources outside of the generative AI system. The student must include an annotation on all materials submitted that explicitly documents how AI was used to generate the document and properly reference both the sources and the AI tools such as ChatGPT (OpenAI, 2023). The student must review the information in the document and edit for accuracy, completeness, proper grammar, and demonstrate that the wording accurately reflects the student’s understanding and purpose in writing the text. Students should be aware that text generated solely from AI generators may include factual errors, bias, and may contain incomplete or inaccurate reference information, in addition to furthering appropriating knowledge produced by historically marginalized scholars without proper crediting. If you have any questions on whether a specific AI tool is allowed for any aspect of your work in this class, please ask your instructor for guidance. Failure to ensure agreement with your instructor on use of AI, prior to doing so, may result in a zero score. (NOTE: instructors have sophisticated tools to determine AI plagiarism.)"
  },
  {
    "objectID": "syllabus.html#students-and-disability-accommodations",
    "href": "syllabus.html#students-and-disability-accommodations",
    "title": "Syllabus",
    "section": "Students and Disability Accommodations:",
    "text": "Students and Disability Accommodations:\nUSC welcomes students with disabilities into all of the University’s educational programs. The Office of Student Accessibility Services (OSAS) is responsible for the determination of appropriate accommodations for students who encounter disability-related barriers. Once a student has completed the OSAS process (registration, initial appointment, and submitted documentation) and accommodations are determined to be reasonable and appropriate, a Letter of Accommodation (LOA) will be available to generate for each course. The LOA must be given to each course instructor by the student and followed up with a discussion. This should be done as early in the semester as possible as accommodations are not retroactive. More information can be found at http://osas.usc.edu. You may contact OSAS at (213) 740-0776 or via email at osasfrontdesk@usc.edu."
  },
  {
    "objectID": "syllabus.html#support-systems",
    "href": "syllabus.html#support-systems",
    "title": "Syllabus",
    "section": "Support Systems:",
    "text": "Support Systems:\nCounseling and Mental Health - (213) 740-9355 – 24/7 on call\nhttps://studenthealth.usc.edu/counseling/\nFree and confidential mental health treatment for students, including short-term psychotherapy, group counseling, stress fitness workshops, and crisis intervention.\nNational Suicide Prevention Lifeline - dial 988 – 24/7 on call\nhttp://www.suicidepreventionlifeline.org\nProvides free and confidential emotional support to people in suicidal crisis or emotional distress 24 hours a day, 7 days a week.\nRelationship and Sexual Violence Prevention Services (RSVP) - (213) 740-9355(WELL), press “0” after hours – 24/7 on call\nhttps://studenthealth.usc.edu/sexual-assault\nFree and confidential therapy services, workshops, and training for situations related to gender-based harm.\nOffice for Equity, Equal Opportunity, and Title IX (EEO-TIX) - (213) 740-5086\nhttp://eeotix.usc.edu\nInformation about how to get help or help someone affected by harassment or discrimination, rights of protected classes, reporting options, and additional resources for students, faculty, staff, visitors, and applicants.\nReporting Incidents of Bias or Harassment - (213) 740-5086 or (213) 821-8298\nhttp://usc-advocate.symplicity.com/care_report\nAvenue to report incidents of bias, hate crimes, and microaggressions to the Office for Equity, Equal Opportunity, and Title for appropriate investigation, supportive measures, and response.\nThe Office of Student Accessibility Services (OSAS) - (213) 740-0776\nhttp://osas.usc.edu\nOSAS ensures equal access for students with disabilities through providing academic accommodations and auxiliary aids in accordance with federal laws and university policy.\nUSC Campus Support and Intervention - (213) 821-4710\nhttp://campussupport.usc.edu\nAssists students and families in resolving complex personal, financial, and academic issues adversely affecting their success as a student.\nDiversity, Equity and Inclusion - (213) 740-2101\nhttp://diversity.usc.edu\nInformation on events, programs and training, the Provost’s Diversity and Inclusion Council, Diversity Liaisons for each academic school, chronology, participation, and various resources for students.\nUSC Emergency - UPC: (213) 740-4321, HSC: (323) 442-1000 – 24/7 on call\nhttp://dps.usc.edu, http://emergency.usc.edu\nEmergency assistance and avenue to report a crime. Latest updates regarding safety, including ways in which instruction will be continued if an officially declared emergency makes travel to campus infeasible.\nUSC Department of Public Safety - UPC: (213) 740-6000, HSC: (323) 442-1200 – 24/7 on call\nhttp://dps.usc.edu\nNon-emergency assistance or information.\nOffice of the Ombuds - (213) 821-9556 (UPC) / (323-442-0382 (HSC)\nhttp://ombuds.usc.edu\nA safe and confidential place to share your USC-related issues with a University Ombuds who will work with you to explore options or paths to manage your concern.\nOccupational Therapy Faculty Practice - (323) 442-3340 or\notfp@med.usc.edu, http://chan.usc.edu/otfp\nConfidential Lifestyle Redesign services for USC students to support health promoting habits and routines that enhance quality of life and academic performance."
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "Week\nDate\nTopic\nSlides\nLab\nAssignment\n\n\n\n\n1\n8-23\nIntroduction to Data Science and R\nSlides\nLab\n\n\n\n2\n8-30\nVersion Control & Reproducible Research\nSlides\nLab\n\n\n\n3\n9-??\nExploratory data analysis\nSlides\nLab\n\n\n\n4\n9-??\nData visualization\nSlides\nLab\nHW1\n\n\n\nWeek 1"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "R. A platform for statistical computing.\nRStudio. An IDE for R. The most straightforward way to get into using R and Quarto.\nR Graphics Cookbook. Complete guide to plotting data with ggplot.\nR Style Guide. Write readable code.\nRStudio Cheatsheets Other quick guides, including information about using RStudio’s IDE and some of the main tools in R."
  },
  {
    "objectID": "references.html#r",
    "href": "references.html#r",
    "title": "References",
    "section": "",
    "text": "R. A platform for statistical computing.\nRStudio. An IDE for R. The most straightforward way to get into using R and Quarto.\nR Graphics Cookbook. Complete guide to plotting data with ggplot.\nR Style Guide. Write readable code.\nRStudio Cheatsheets Other quick guides, including information about using RStudio’s IDE and some of the main tools in R."
  },
  {
    "objectID": "references.html#quarto",
    "href": "references.html#quarto",
    "title": "References",
    "section": "Quarto",
    "text": "Quarto\n\nQuarto An integrated, open-source publishing system. Generalizes and expands upon a lot of the functionality of RMarkdown.\nQuarto Guide Comprehensive guide to creating a wide range of documents and presentations with Quarto."
  },
  {
    "objectID": "references.html#git-github",
    "href": "references.html#git-github",
    "title": "References",
    "section": "Git / GitHub",
    "text": "Git / GitHub\n\nGit. Version control system. Installs with Apple’s Developer Tools, or get the latest version via Homebrew.\nGitHub. Host public Git repositories for free. Pay to host private ones. Also a source for publicly available code (e.g. R packages and utilities) written by other people.\nGitHub Docs Tutorials for performing various actions using git and GitHub, from beginner to advanced."
  },
  {
    "objectID": "references.html#markdown-r-markdown",
    "href": "references.html#markdown-r-markdown",
    "title": "References",
    "section": "Markdown / R Markdown",
    "text": "Markdown / R Markdown\n\nMarkdown tutorial: An interactive tutorial to practice using Markdown.\nMarkdown cheatsheet: Useful one-page reminder of Markdown syntax.\nR Markdown Cheatsheet An overview of Markdown and RMarkdown conventions.\nR Markdown documentation from the makers of RStudio. Lots of good examples."
  },
  {
    "objectID": "references.html#data-science",
    "href": "references.html#data-science",
    "title": "References",
    "section": "Data Science",
    "text": "Data Science\n\nViridical Data Science Great book on the practice of data science by Bin Yu and Rebecca Barter.\nR Programming for Data Science Book on using R for data science, by Roger Peng.\nJenny Bryan’s Stat 545. Notes and tutorials for a Data Analysis course taught by Jennifer Bryan at the University of British Columbia. Lots of useful material.\nThe Plain Person’s Guide to Plain Text Social Science: Why you should write data-based reports using plain-text tools.\nKarl Broman’s Tutorials and Guides Accurate and concise guides to many of the tools and topics described here, including getting started with reproducible research, using git and GitHub, and working with knitr.\nMakefiles for OCR and converting Shapefiles. Some further examples of Makefiles in the data-analysis pipeline, by Lincoln Mullen"
  },
  {
    "objectID": "references.html#tools",
    "href": "references.html#tools",
    "title": "References",
    "section": "Tools",
    "text": "Tools\n\nApple’s Developer Tools Unix toolchain. Install directly with xcode-select --install, or just try to use e.g. git from the terminal and have OS X prompt you to install the tools.\nHomebrew package manager. A convenient way to install several of the tools here, including Emacs and Pandoc.\nR. A platform for statistical computing.\nPython and SciPy. Python is a general-purpose programming language increasingly used in data manipulation and analysis.\nRStudio. An IDE for R. The most straightforward way to get into using R and RMarkdown.\nTeX and LaTeX. A typesetting and document preparation system. You can write files in .tex format directly, but it is more useful to just have it available in the background for other tools to use. The MacTeX Distribution is the one to install for macOS.\nPandoc. Converts plain-text documents to and from a wide variety of formats. Can be installed with Homebrew. Be sure to also install pandoc-citeproc for processing citations and bibliographies, and pandoc-crossref for producing cross-references and labels.\nGit. Version control system. Installs with Apple’s Developer Tools, or get the latest version via Homebrew.\nGitHub. Host public Git repositories for free. Pay to host private ones. Also a source for publicly available code (e.g. R packages and utilities) written by other people.\nGNU Make. You tell make what the steps are to create the pieces of a document or program. As you edit and change the various pieces, it automatically figures out which pieces need to be updated and recompiled, and issues the commands to do that. See Karl Broman’s Minimal Make for a short introduction. Make will be installed automatically with Apple’s developer tools.\nlintr and flycheck. Tools that nudge you to write neater code.\nZotero. A citation manager that incorporates PDF storage, annotation, and other features. Zotero is free to use and can export to BibTeX/BibLaTeX files."
  },
  {
    "objectID": "references.html#paid-applications-and-services",
    "href": "references.html#paid-applications-and-services",
    "title": "References",
    "section": "Paid Applications and Services",
    "text": "Paid Applications and Services\n\nBackblaze. Secure off-site backup.\nMarked 2. Live HTML previewing of Markdown documents. Mac OS X only.\nSublime Text. Python-based text editor.\nMendeley, and Papers are additional citation managers that incorporate PDF storage, annotation, and other features. Mendeley has a premium tier. Papers is a paid application after a trial period. I haven’t used either of these, so I can’t confirm whether or not they export to BibTeX/BibLaTeX files. Papers can supposedly output citation keys in pandoc’s format, among several others."
  },
  {
    "objectID": "references.html#data",
    "href": "references.html#data",
    "title": "References",
    "section": "Data",
    "text": "Data\nMany of these websites offer publicly available datasets that can be used for research or class projects.\n\nHealth and Biological data\n\nCDC National Center for Health Statistics\nNIH Cancer Surveillance\nWorld Health Organization WHO data\nUniProt data\nThe Gene Ontology Project\nGene Expression Omnibus Data\nUS Center for Disease Control and Prevention Data\nCalifornia Health and Human Services Open Data Portal\nCovid Data CovidTracker\nUSC Sustainability Data\nBureau of Transportation Statistics\n\n\n\nAcademic Publications and related\n\nFigshare data repository\nZenodo data repository\nHarvard Dataverse\nElsevier Developers API\n\n\n\nGovernment data\n\nUS Open Data Initiative DATA.GOV\nCensus Data Explorer and National Historical Geographic Information System (NHGIS)\nBureau of Economic Analysis\nBureau of Labor Statistics\nHousing data Zillow\nBureau of Justice Statistics National Center for Education Statistics: The Nation’s Report Card\nLos Angeles city data\nLos Angeles crime data\n\n\n\nOther data\n\nWorld Bank open data\nInter-university Consortium for Political and Social Research (ICPSR)\nFiveThirtyEight open data\nKaggle datasets\nLiterally all of Wikipedia\n\n\n\nSocial Networks\n\nTwitter Developers API (probably broken?)\nGitHub Developers API\nInstagram Developers API\nLinkedIn Developers API"
  },
  {
    "objectID": "labs/01-lab.html",
    "href": "labs/01-lab.html",
    "title": "Lab 01 - Hello R!",
    "section": "",
    "text": "Get acquainted with R and RStudio, which we will be using throughout the course to analyze data.\nAppreciate the value of visualization in exploring the relationship between variables.\nStart using R for building plots and calculating summary statistics."
  },
  {
    "objectID": "labs/01-lab.html#download-r",
    "href": "labs/01-lab.html#download-r",
    "title": "Lab 01 - Hello R!",
    "section": "1 Download R",
    "text": "1 Download R\n\nIf you don’t have R installed.\nGo to the CRAN and download R, make sure you get the version that matches your operating system.\n\n\nIf you have R installed\nIf you have R installed run the following code\n\nR.version\n\n               _                           \nplatform       x86_64-apple-darwin20       \narch           x86_64                      \nos             darwin20                    \nsystem         x86_64, darwin20            \nstatus                                     \nmajor          4                           \nminor          3.3                         \nyear           2024                        \nmonth          02                          \nday            29                          \nsvn rev        86002                       \nlanguage       R                           \nversion.string R version 4.3.3 (2024-02-29)\nnickname       Angel Food Cake             \n\n\nThis should tell you what version of R you are currently using. If your R version is lower then 4.3.0, I would strongly recommend updating. In general, it is a good idea to keep your R version up to date, unless you have a project right now that depends on a specific version of R."
  },
  {
    "objectID": "labs/01-lab.html#download-rstudio",
    "href": "labs/01-lab.html#download-rstudio",
    "title": "Lab 01 - Hello R!",
    "section": "1.2 Download RStudio",
    "text": "1.2 Download RStudio\nWe recommend using RStudio as your IDE if you don’t already have it installed. You can go to the RStudio website to download and install the software. Once it is installed, open RStudio and use it to complete the rest of this lab."
  },
  {
    "objectID": "labs/01-lab.html#start-a-new-project",
    "href": "labs/01-lab.html#start-a-new-project",
    "title": "Lab 01 - Hello R!",
    "section": "Start a new Project",
    "text": "Start a new Project\nRStudio Projects are a great way to stay organized and keep all of your work on a particular topic in one place. Project files keep track of things like the R objects you are using and which files you have open, so that you can quickly jump in and out of different work environments.\nWe’re going to start a new Project called PM566labs. If you want to keep all of your materials for this class in one place, you may want to open Finder (MacOS) or File Explorer (Windows) and create a new folder (directory) for this class.\nIn the top right of the RStudio window, you should see a drop-down menu that says “Project: (None)”. Click on this and then “New Project…”, which will open up a dialogue box. If you had already created a PM566labs directory, you could choose the “Existing Directory” option to associate this Project with that directory. Since we haven’t done that, we’ll use the “New Directory” option, then select the generic Project type, “New Project”. Give your new directory the name PM566labs and use the “Browse” button to choose where you want to save it on your computer, then click “Create Project”. Now in the top right, you should see “PM566labs” next to the R Project logo."
  },
  {
    "objectID": "labs/01-lab.html#create-a-quarto-document",
    "href": "labs/01-lab.html#create-a-quarto-document",
    "title": "Lab 01 - Hello R!",
    "section": "Create a Quarto document",
    "text": "Create a Quarto document\nWe will use Quarto documents a lot in this course because they are fully reproducible and allow us to seamlessly integrate code and text. We expect you to use Quarto for all homework assignments and (almost) all labs.\nIn the top left, you will see a “New File” icon (a white “plus” sign in a green circle over a blank document) that leads to a drop-down menu. Click on this and then select “Quarto document…”, which will open up a dialogue box. You can leave most of the settings on their defaults for now, just give your document a title (like “Lab 1”) and an author (yourself) and click “Create”. RStudio may ask you if you would like to install a package that is required, and if so, click “Install”.\nThis will open the default Quarto document, which already contains some example content. Read through it, then remove this content. Please do not hand in assignments that contain the default content, as I have seen it plenty of times! Set up new sections in your document titled “Question 1” through “Question 6”. This document will serve as the template for your responses to this lab. Under each section title, add an R code chunk via “Insert…”, “Executable Cell”, “R”. Alternatively, you can switch to the “Source” editor (in the top left of the Editor pane) and add an R chunk by typing the following:\n```{r}\n```\nThis will create an R code chunk and any code you add inside of it will be executed when you Render the document.\nSave your Quarto markdown (qmd) file as lab-01.qmd and see what happens when you click “Render”."
  },
  {
    "objectID": "labs/01-lab.html#yaml",
    "href": "labs/01-lab.html#yaml",
    "title": "Lab 01 - Hello R!",
    "section": "YAML",
    "text": "YAML\nOpen the Quarto (qmd) file in your project, make sure the author name is your name, and Render the document."
  },
  {
    "objectID": "labs/01-lab.html#question-1",
    "href": "labs/01-lab.html#question-1",
    "title": "Lab 01 - Hello R!",
    "section": "Question 1",
    "text": "Question 1\n\nBased on the help file, how many rows and how many columns does the datasaurus_dozen file have? What are the variables included in the data frame? Add your responses to your lab report, with relevant code in the associated R code chunk, and free-form text outside of the code chunk.\n\nLet’s take a look at what these datasets are. To start, we can make a frequency table of the dataset variable:\n\ntable(datasaurus_dozen$dataset)\n\nHere, we used the $ operator to access a specific column (variable) of the dataset. Then we used the table function to summarize that variable. table is great for quickly summarizing categorical variables, but it’s not very useful for summarizing continuous variables, where most unique values are only present once. For continuous variables, try the summary function.\nThe original Datasaurus (dino) was created by Alberto Cairo in this great blog post. The other Dozen were generated using simulated annealing and the process is described in the paper Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics through Simulated Annealing by Justin Matejka and George Fitzmaurice. In the paper, the authors simulate a variety of datasets with the same summary statistics as the Datasaurus, but with very different distributions."
  },
  {
    "objectID": "labs/01-lab.html#question-2",
    "href": "labs/01-lab.html#question-2",
    "title": "Lab 01 - Hello R!",
    "section": "Question 2",
    "text": "Question 2\n\nPlot y vs. x for the dino dataset. Then, calculate the correlation coefficient between x and y for just this dataset.\n\nBelow is the code you will need to complete this exercise. Basically, the answer is already given, but you need to include relevant bits in your Quarto document and successfully Render it and view the results.\nWe’re going to start by subsetting our data down to just the dino dataset.\n\nSubsetting\n\ndino_data &lt;- datasaurus_dozen[datasaurus_dozen$dataset == 'dino', ]\n\nThere is a lot going on here, so let’s slow down and unpack it a bit.\nThe first thing to note is the assignment operator: &lt;-. This special symbol is used to create a new object or assign a new value to an existing one. In this case, we’re creating a new object called dino_data.\nThe second important feature is the set of square brackets: []. When these come immediately after the name of an object, they are used for subsetting that object, or taking a smaller piece of it. In this case, we want to subset the datasaurus_dozen object. Since this is a two-dimensional data.frame, we can subset it by either rows or columns, or both. The comma (,) separates our row subset from our column subset. In this case, we only want to subset by row and keep all the columns, so there is nothing after the comma.\nIn R (as in Python and many other programming languages), we can check whether or not two values are equal by using the == operator. Here, we again use the $ to access the dataset variable and we check if it is equal to the value 'dino'. If it is, this comparison will return TRUE and we will keep that row. If it isn’t, this comparison will return FALSE and we will not keep that row.\n\n\nPlotting\nNext, we need to visualize these data. We will use the plot function for this, which is R’s most basic plotting function. If you provide the plot function with two numeric vectors, it will plot them in a scatter plot. Let’s see what happens when we plot the x and y variables from our dino_data object:\n\nplot(dino_data$x, dino_data$y)\n# ggplot(data = dino_data, mapping = aes(x = x, y = y)) +\n#   geom_point()\n\n(I’ve also included code for producing similar plots using the ggplot function from the ggplot2 package. This is another widely-used plotting function that includes some more aesthetically pleasing defaults, but requires more complicated syntax)\nWe will talk a lot more about the philosophy of data visualization, how to choose the right plot type, and constructing visualizations in layers in the coming weeks. But for now, you can follow along with the code that is provided.\nFor the second part of these exercises, we need to calculate a summary statistic: the correlation coefficient. The correlation coefficient, often referred to as \\(r\\) in statistics, measures the linear association between two variables. You will see that some of the pairs of variables we plot do not have a linear relationship between them. This is exactly why we want to visualize first: visualize to assess the form of the relationship, and calculate \\(r\\) only if relevant. In this case, calculating a correlation coefficient really doesn’t make sense since the relationship between x and y is definitely not linear – it’s dinosaurial!\nBut, for illustrative purposes, let’s calculate correlation coefficient between x and y. Like plot, the cor function takes two numeric variables and calculates their correlation coefficient:\n\ncor(dino_data$x, dino_data$y)\n# dino_data |&gt;\n#   summarize(r = cor(x, y))\n\n(I’ve also included the “tidyverse” way of calculating this value. The “tidyverse” is a collection of packages that includes ggplot2 and is based on the concept of “tidy”, rectangular datasets. We will tend to focus on the “Base R” way of doing things, as learning the “tidyverse” coding style is almost like learning another language in addition to R)"
  },
  {
    "objectID": "labs/01-lab.html#question-3",
    "href": "labs/01-lab.html#question-3",
    "title": "Lab 01 - Hello R!",
    "section": "Question 3",
    "text": "Question 3\n\nNow try it on your own! Plot y vs. x for the star dataset, another one of the datasaurus_dozen. You can (and should) re-use code we introduced above, just replace the dataset name with the desired dataset. Then, calculate the correlation coefficient between x and y for this dataset. How does this value compare to the r of dino?"
  },
  {
    "objectID": "labs/01-lab.html#question-4",
    "href": "labs/01-lab.html#question-4",
    "title": "Lab 01 - Hello R!",
    "section": "Question 4",
    "text": "Question 4\n\nPlot y vs. x for the circle dataset. You can (and should) reuse code we introduced above, just replace the dataset name with the desired dataset. Then, calculate the correlation coefficient between x and y for this dataset. How does this value compare to the r of dino?"
  },
  {
    "objectID": "labs/01-lab.html#question-5",
    "href": "labs/01-lab.html#question-5",
    "title": "Lab 01 - Hello R!",
    "section": "Question 5",
    "text": "Question 5\nNow let’s plot all 13 datasets at once. In order to do this we will make use of the layout function. This function allows you to put multiple plots in the same plotting window. We will create a 4x4 matrix containing the values 1 through 16 and pass this to layout, which lets it know where we want each plot to go (we only have 13 datasets, so there will be a few empty spots at the end). This may be too many plots for a small viewing window, so if you get the error message Error in plot.new() : figure margins too large, try making your plotting window larger.\nThen we use a for loop to perform a set of actions over every unique value of the dataset variable. This creates a new object, called name, that takes on each of those unique values, but it only exists within the context (interior) of the loop. Then we subset and plot the data, as we have before.\n\nlayout(matrix(1:16, nrow=4, ncol=4))\nfor(name in unique(datasaurus_dozen$dataset)){\n  subset &lt;- datasaurus_dozen[datasaurus_dozen$dataset == name, ]\n  plot(subset$x, subset$y, main = name)\n}\nlayout(1)\n\n\n# ggplot(datasaurus_dozen, aes(x = x, y = y, color = dataset))+\n#   geom_point()+\n#   facet_wrap(~ dataset, ncol = 3) +\n#   theme(legend.position = \"none\")\n\nThe second call to layout will reset the plotting window, so that the next plot will take up the entire window, rather than 1/16th of it.\nOptional:If you really want to maximize the plotting area of this figure, you can also adjust the plotting margins via the par function (short for “graphical parameters”). The setting for margins is called mar and it takes a vector of length 4, specifying the bottom, left, top, and right margins, in order (the units are lines of text). You can set each margin to a value of 2 with par(mar = c(2,2,2,2)) and then reset to the default values with par(mar = c(5,4,4,2) + 0.1)."
  },
  {
    "objectID": "labs/01-lab.html#question-6",
    "href": "labs/01-lab.html#question-6",
    "title": "Lab 01 - Hello R!",
    "section": "Question 6",
    "text": "Question 6\nFinally, we want to calculate the correlation between the x and y variables for all 13 datasets. Like before, we will use a loop, but this time, since we want to return a specific value every time through the loop, we will use the sapply function. sapply is useful way to apply a function to every element of a vector. In this case, we provide the vector of unique dataset names (like before) and then our own custom function. This function subsets the data as before, and then returns the correlation coefficient as the output of the function.\n\nsapply(unique(datasaurus_dozen$dataset), function(name){\n    subset &lt;- datasaurus_dozen[datasaurus_dozen$dataset == name, ]\n    return(cor(subset$x, subset$y))\n})\n\n\n# datasaurus_dozen |&gt;\n#   group_by(dataset) |&gt;\n#   summarize(r = cor(x, y))\n\nYou’re now done with the data analysis exercises, but we’d like you to do two more things:\nResize your figures:\nAdd the fields fig-width and fig-height to the YAML header of your document. These will allow you to specify the size (in inches) of any figures generated by the code chunks in your report.\nYou can also use different figure sizes for different figures. If you are in the Visual editor mode, switch to Source mode. Notice that each R chunk starts and ends with three backticks. Click on the gear icon in the top right of a code chunk and select “Use custom figure size” in the pop-up menu. Set the height and width of the figures and hit Apply when done. Then, render your document and see how you like the new sizes. Try making the plot for Question 5 larger, until you are happy with its size. Note that changing the figure sizes added new options to these chunks: fig.width and fig.height. You can change them by defining different values directly in your Quarto document as well.\nChange the look of your report:\nIf you have time, you can explore the different ways you can add styling to your document. Try adding a theme field to the YAML header and see if you can find valid names of different themes.\nHere is a Quarto cheatsheet and a general markdown cheatsheet that shows some of the many cool features you can make use of in a Quarto document.\n\nThis set of lab exersices have been adopted from Mine Çetinkaya-Rundel’s class Introduction to Data Science."
  },
  {
    "objectID": "syllabus.html#course-slides",
    "href": "syllabus.html#course-slides",
    "title": "Syllabus",
    "section": "Course Slides",
    "text": "Course Slides\nLecture slides presented in class are available on the course website."
  },
  {
    "objectID": "slides/week1.html",
    "href": "slides/week1.html",
    "title": "Welcome!",
    "section": "",
    "text": "Kelly Street\n\nAssistant Professor of Biostatistics\nDepartment of Population and Public Health Sciences"
  },
  {
    "objectID": "labs/week1.html",
    "href": "labs/week1.html",
    "title": "Lab 1 - Hello R!",
    "section": "",
    "text": "Get acquainted with R and RStudio, which we will be using throughout the course to analyze data.\nAppreciate the value of visualization in exploring the relationship between variables.\nStart using R for building plots and calculating summary statistics."
  },
  {
    "objectID": "labs/week1.html#download-r",
    "href": "labs/week1.html#download-r",
    "title": "Lab 1 - Hello R!",
    "section": "1 Download R",
    "text": "1 Download R\n\nIf you don’t have R installed.\nGo to the CRAN and download R, make sure you get the version that matches your operating system.\n\n\nIf you have R installed\nIf you have R installed run the following code\n\nR.version\n\n               _                           \nplatform       x86_64-apple-darwin20       \narch           x86_64                      \nos             darwin20                    \nsystem         x86_64, darwin20            \nstatus                                     \nmajor          4                           \nminor          3.3                         \nyear           2024                        \nmonth          02                          \nday            29                          \nsvn rev        86002                       \nlanguage       R                           \nversion.string R version 4.3.3 (2024-02-29)\nnickname       Angel Food Cake             \n\n\nThis should tell you what version of R you are currently using. If your R version is lower then 4.3.0, I would strongly recommend updating. In general, it is a good idea to keep your R version up to date, unless you have a project right now that depends on a specific version of R."
  },
  {
    "objectID": "labs/week1.html#download-rstudio",
    "href": "labs/week1.html#download-rstudio",
    "title": "Lab 1 - Hello R!",
    "section": "1.2 Download RStudio",
    "text": "1.2 Download RStudio\nWe recommend using RStudio as your IDE if you don’t already have it installed. You can go to the RStudio website to download and install the software. Once it is installed, open RStudio and use it to complete the rest of this lab."
  },
  {
    "objectID": "labs/week1.html#start-a-new-project",
    "href": "labs/week1.html#start-a-new-project",
    "title": "Lab 1 - Hello R!",
    "section": "Start a new Project",
    "text": "Start a new Project\nRStudio Projects are a great way to stay organized and keep all of your work on a particular topic in one place. Project files keep track of things like the R objects you are using and which files you have open, so that you can quickly jump in and out of different work environments.\nWe’re going to start a new Project called PM566labs. If you want to keep all of your materials for this class in one place, you may want to open Finder (MacOS) or File Explorer (Windows) and create a new folder (directory) for this class.\nIn the top right of the RStudio window, you should see a drop-down menu that says “Project: (None)”. Click on this and then “New Project…”, which will open up a dialogue box. If you had already created a PM566labs directory, you could choose the “Existing Directory” option to associate this Project with that directory. Since we haven’t done that, we’ll use the “New Directory” option, then select the generic Project type, “New Project”. Give your new directory the name PM566labs and use the “Browse” button to choose where you want to save it on your computer, then click “Create Project”. Now in the top right, you should see “PM566labs” next to the R Project logo."
  },
  {
    "objectID": "labs/week1.html#create-a-quarto-document",
    "href": "labs/week1.html#create-a-quarto-document",
    "title": "Lab 1 - Hello R!",
    "section": "Create a Quarto document",
    "text": "Create a Quarto document\nWe will use Quarto documents a lot in this course because they are fully reproducible and allow us to seamlessly integrate code and text. We expect you to use Quarto for all homework assignments and (almost) all labs.\nIn the top left, you will see a “New File” icon (a white “plus” sign in a green circle over a blank document) that leads to a drop-down menu. Click on this and then select “Quarto document…”, which will open up a dialogue box. You can leave most of the settings on their defaults for now, just give your document a title (like “Lab 1”) and an author (yourself) and click “Create”. RStudio may ask you if you would like to install a package that is required, and if so, click “Install”.\nThis will open the default Quarto document, which already contains some example content. Read through it, then remove this content. Please do not hand in assignments that contain the default content, as I have seen it plenty of times! Set up new sections in your document titled “Question 1” through “Question 6”. This document will serve as the template for your responses to this lab. Under each section title, add an R code chunk via “Insert…”, “Executable Cell”, “R”. Alternatively, you can switch to the “Source” editor (in the top left of the Editor pane) and add an R chunk by typing the following:\n```{r}\n```\nThis will create an R code chunk and any code you add inside of it will be executed when you Render the document.\nSave your Quarto markdown (qmd) file as lab-01.qmd and see what happens when you click “Render”."
  },
  {
    "objectID": "labs/week1.html#yaml",
    "href": "labs/week1.html#yaml",
    "title": "Lab 1 - Hello R!",
    "section": "YAML",
    "text": "YAML\nThe top portion of your Quarto file (between the three dashed lines) is called YAML. It stands for “YAML Ain’t Markup Language”. It is a human-friendly data serialization standard for all programming languages. All you need to know is that this area is called the YAML (we will refer to it as such) and that it contains meta information about your document.\nOpen the Quarto (qmd) file in your project, make sure the author name is your name. You can add additional lines to the YAML section to control more aspects of your document. For example, you can set the output to be a PDF or HTML document by adding either format: pdf or format: html.\nRegardless of what output format you choose, add another line to the YAML header that reads embed-resources: true. This tells Quarto that you want to produce a “stand-alone” document that contains all images directly in the document. If you don’t do this, Quarto will often create a separate directory (called &lt;document&gt;_files) that contains these images and your output will depend on this outside directory.\nWhen you’re done, click “Render” to compile the document."
  },
  {
    "objectID": "labs/week1.html#question-1",
    "href": "labs/week1.html#question-1",
    "title": "Lab 1 - Hello R!",
    "section": "Question 1",
    "text": "Question 1\n\nBased on the help file, how many rows and how many columns does the datasaurus_dozen file have? What are the variables included in the data frame? Add your responses to your lab report, with relevant code in the associated R code chunk, and free-form text outside of the code chunk.\n\nLet’s take a look at what these datasets are. To start, we can make a frequency table of the dataset variable:\n\ntable(datasaurus_dozen$dataset)\n\nHere, we used the $ operator to access a specific column (variable) of the dataset. Then we used the table function to summarize that variable. table is great for quickly summarizing categorical variables, but it’s not very useful for summarizing continuous variables, where most unique values are only present once. For continuous variables, try the summary function.\nThe original Datasaurus (dino) was created by Alberto Cairo in this great blog post. The other Dozen were generated using simulated annealing and the process is described in the paper Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics through Simulated Annealing by Justin Matejka and George Fitzmaurice. In the paper, the authors simulate a variety of datasets with the same summary statistics as the Datasaurus, but with very different distributions."
  },
  {
    "objectID": "labs/week1.html#question-2",
    "href": "labs/week1.html#question-2",
    "title": "Lab 1 - Hello R!",
    "section": "Question 2",
    "text": "Question 2\n\nPlot y vs. x for the dino dataset. Then, calculate the correlation coefficient between x and y for just this dataset.\n\nBelow is the code you will need to complete this exercise. Basically, the answer is already given, but you need to include relevant bits in your Quarto document and successfully Render it and view the results.\nWe’re going to start by subsetting our data down to just the dino dataset.\n\nSubsetting\n\ndino_data &lt;- datasaurus_dozen[datasaurus_dozen$dataset == 'dino', ]\n\nThere is a lot going on here, so let’s slow down and unpack it a bit.\nThe first thing to note is the assignment operator: &lt;-. This special symbol is used to create a new object or assign a new value to an existing one. In this case, we’re creating a new object called dino_data.\nThe second important feature is the set of square brackets: []. When these come immediately after the name of an object, they are used for subsetting that object, or taking a smaller piece of it. In this case, we want to subset the datasaurus_dozen object. Since this is a two-dimensional data.frame, we can subset it by either rows or columns, or both. The comma (,) separates our row subset from our column subset. In this case, we only want to subset by row and keep all the columns, so there is nothing after the comma.\nIn R (as in Python and many other programming languages), we can check whether or not two values are equal by using the == operator. Here, we again use the $ to access the dataset variable and we check if it is equal to the value 'dino'. If it is, this comparison will return TRUE and we will keep that row. If it isn’t, this comparison will return FALSE and we will not keep that row.\n\n\nPlotting\nNext, we need to visualize these data. We will use the plot function for this, which is R’s most basic plotting function. If you provide the plot function with two numeric vectors, it will plot them in a scatter plot. Let’s see what happens when we plot the x and y variables from our dino_data object:\n\nplot(dino_data$x, dino_data$y)\n# ggplot(data = dino_data, mapping = aes(x = x, y = y)) +\n#   geom_point()\n\n(I’ve also included code for producing similar plots using the ggplot function from the ggplot2 package. This is another widely-used plotting function that includes some more aesthetically pleasing defaults, but requires more complicated syntax)\nWe will talk a lot more about the philosophy of data visualization, how to choose the right plot type, and constructing visualizations in layers in the coming weeks. But for now, you can follow along with the code that is provided.\nFor the second part of these exercises, we need to calculate a summary statistic: the correlation coefficient. The correlation coefficient, often referred to as \\(r\\) in statistics, measures the linear association between two variables. You will see that some of the pairs of variables we plot do not have a linear relationship between them. This is exactly why we want to visualize first: visualize to assess the form of the relationship, and calculate \\(r\\) only if relevant. In this case, calculating a correlation coefficient really doesn’t make sense since the relationship between x and y is definitely not linear – it’s dinosaurial!\nBut, for illustrative purposes, let’s calculate correlation coefficient between x and y. Like plot, the cor function takes two numeric variables and calculates their correlation coefficient:\n\ncor(dino_data$x, dino_data$y)\n# dino_data |&gt;\n#   summarize(r = cor(x, y))\n\n(I’ve also included the “tidyverse” way of calculating this value. The “tidyverse” is a collection of packages that includes ggplot2 and is based on the concept of “tidy”, rectangular datasets. We will tend to focus on the “Base R” way of doing things, as learning the “tidyverse” coding style is almost like learning another language in addition to R)"
  },
  {
    "objectID": "labs/week1.html#question-3",
    "href": "labs/week1.html#question-3",
    "title": "Lab 1 - Hello R!",
    "section": "Question 3",
    "text": "Question 3\n\nNow try it on your own! Plot y vs. x for the star dataset, another one of the datasaurus_dozen. You can (and should) re-use code we introduced above, just replace the dataset name with the desired dataset. Then, calculate the correlation coefficient between x and y for this dataset. How does this value compare to the r of dino?"
  },
  {
    "objectID": "labs/week1.html#question-4",
    "href": "labs/week1.html#question-4",
    "title": "Lab 1 - Hello R!",
    "section": "Question 4",
    "text": "Question 4\n\nPlot y vs. x for the circle dataset. You can (and should) reuse code we introduced above, just replace the dataset name with the desired dataset. Then, calculate the correlation coefficient between x and y for this dataset. How does this value compare to the r of dino?"
  },
  {
    "objectID": "labs/week1.html#question-5",
    "href": "labs/week1.html#question-5",
    "title": "Lab 1 - Hello R!",
    "section": "Question 5",
    "text": "Question 5\nNow let’s plot all 13 datasets at once. In order to do this we will make use of the layout function. This function allows you to put multiple plots in the same plotting window. We will create a 4x4 matrix containing the values 1 through 16 and pass this to layout, which lets it know where we want each plot to go (we only have 13 datasets, so there will be a few empty spots at the end). This may be too many plots for a small viewing window, so if you get the error message Error in plot.new() : figure margins too large, try making your plotting window larger.\nThen we use a for loop to perform a set of actions over every unique value of the dataset variable. This creates a new object, called name, that takes on each of those unique values, but it only exists within the context (interior) of the loop. Then we subset and plot the data, as we have before.\n\nlayout(matrix(1:16, nrow=4, ncol=4))\nfor(name in unique(datasaurus_dozen$dataset)){\n  subset &lt;- datasaurus_dozen[datasaurus_dozen$dataset == name, ]\n  plot(subset$x, subset$y, main = name)\n}\nlayout(1)\n\n\n# ggplot(datasaurus_dozen, aes(x = x, y = y, color = dataset))+\n#   geom_point()+\n#   facet_wrap(~ dataset, ncol = 3) +\n#   theme(legend.position = \"none\")\n\nThe second call to layout will reset the plotting window, so that the next plot will take up the entire window, rather than 1/16th of it.\nOptional:If you really want to maximize the plotting area of this figure, you can also adjust the plotting margins via the par function (short for “graphical parameters”). The setting for margins is called mar and it takes a vector of length 4, specifying the bottom, left, top, and right margins, in order (the units are lines of text). You can set each margin to a value of 2 with par(mar = c(2,2,2,2)) and then reset to the default values with par(mar = c(5,4,4,2) + 0.1)."
  },
  {
    "objectID": "labs/week1.html#question-6",
    "href": "labs/week1.html#question-6",
    "title": "Lab 1 - Hello R!",
    "section": "Question 6",
    "text": "Question 6\nFinally, we want to calculate the correlation between the x and y variables for all 13 datasets. Like before, we will use a loop, but this time, since we want to return a specific value every time through the loop, we will use the sapply function. sapply is useful way to apply a function to every element of a vector. In this case, we provide the vector of unique dataset names (like before) and then our own custom function. This function subsets the data as before, and then returns the correlation coefficient as the output of the function.\n\nsapply(unique(datasaurus_dozen$dataset), function(name){\n    subset &lt;- datasaurus_dozen[datasaurus_dozen$dataset == name, ]\n    return(cor(subset$x, subset$y))\n})\n\n\n# datasaurus_dozen |&gt;\n#   group_by(dataset) |&gt;\n#   summarize(r = cor(x, y))\n\nYou’re now done with the data analysis exercises, but we’d like you to do two more things:\nResize your figures:\nAdd the fields fig-width and fig-height to the YAML header of your document. These will allow you to specify the size (in inches) of any figures generated by the code chunks in your report.\nYou can also use different figure sizes for different figures. If you are in the Visual editor mode, switch to Source mode. Notice that each R chunk starts and ends with three backticks. Click on the gear icon in the top right of a code chunk and select “Use custom figure size” in the pop-up menu. Set the height and width of the figures and hit Apply when done. Then, render your document and see how you like the new sizes. Try making the plot for Question 5 larger, until you are happy with its size. Note that changing the figure sizes added new options to these chunks: fig.width and fig.height. You can change them by defining different values directly in your Quarto document as well.\nChange the look of your report:\nIf you have time, you can explore the different ways you can add styling to your document. Try adding a theme field to the YAML header and see if you can find valid names of different themes.\nHere is a Quarto cheatsheet and a general markdown cheatsheet that shows some of the many cool features you can make use of in a Quarto document."
  }
]